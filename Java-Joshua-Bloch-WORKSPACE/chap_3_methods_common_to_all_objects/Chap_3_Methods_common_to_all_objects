- Class java.lang.Object is the root of the class hierarchy.
- Every class has Object as a superclass. 
- All objects, including arrays, implement the methods of this class.
- Object is a concrete class, it is designed primarily for extension. 
- All of its nonfinal methods (equals, hashCode, toString, clone,and finalize) have explicit general contracts because 
	they are designed to be overridden.

- Object class	
public class Object {
    public final native Class<?> getClass();
	public final native void notifyAll();
    public final native void wait(long timeout) throws InterruptedException;
    public final void wait(long timeout, int nanos) throws InterruptedException {
        if (timeout < 0) { throw new IllegalArgumentException("timeout value is negative");}
        if (nanos < 0 || nanos > 999999) {throw new IllegalArgumentException("nanosecond timeout value out of range");}
        if (nanos >= 500000 || (nanos != 0 && timeout == 0)) {timeout++;}
        wait(timeout);
    }
	public final void wait() throws InterruptedException { wait(0);}
	/* Non final mehtods */
    public native int hashCode();
    public boolean equals(Object obj) { return (this == obj);}
    protected native Object clone() throws CloneNotSupportedException;
    public String toString() { return getClass().getName() + "@" + Integer.toHexString(hashCode()); }
    protected void finalize() throws Throwable { }
}
	
- It is the responsibility of any class overriding these methods to obey their general contracts; failure to do so will 
	prevent other classes that depend on the contracts (such as HashMap and HashSet) from functioning properly in
	conjunction with the class.

	- Item 10: Obey the general contract when overriding equals