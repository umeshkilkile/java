Multitasking
	- a computer had a single CPU, and was only capable of executing a single program at a time. Later came multitasking which meant that computers could execute multiple programs (AKA tasks or processes) at the same time. It wasn't really "at the same time" though. The single CPU was shared between the programs. The operating system would switch between the programs running, executing each of them for a little while before switching.

Multithreading
	- which mean that you could have multiple threads of execution inside the same program. A thread of execution can be thought of as a CPU executing the program. When you have multiple threads executing the same program, it is like having multiple CPUs execute within the same program.
	
Persistent Data Structures
	- A persistent data structure always preserves the previous version of itself when modified. Thus, if multiple threads point to the same persistent data structure and one thread modifies it, the modifying thread gets a reference to the new structure. All other threads keep a reference to the old structure which is still unchanged and thus consistent.

Concurrency
	- Concurrency means that an application is making progress on more than one task at the same time (concurrently). Well, if the computer only has one CPU the application may not make progress on more than one task at exactly the same time, but more than one task is being processed at a time inside the application. It does not completely finish one task before it begins the next.
Parallelism
	- Parallelism means that an application splits its tasks up into smaller subtasks which can be processed in parallel, for instance on multiple CPUs at the exact same time.

Thread
	- A thread is a thread of execution in a program. The Java Virtual Machine allows an application to have multiple threads of execution running concurrently (at the same time; simultaneously.).
	- When a Java Virtual Machine starts up, there is usually a single non-daemon thread (which typically calls the method named main of some designated class). 
	- The Java Virtual Machine continues to execute threads until either of the following occurs:
		- The exit method of class Runtime has been called and the security manager has permitted the exit operation to take place.
		- All threads that are not daemon threads have died, either by returning from the call to the run method or by throwing an exception that propagates beyond the run method.
	- There are two ways to specify what code the thread should execute. 
		- The first is to create a subclass of Thread and override the run() method. 
		- The second method is to pass an object that implements Runnable (java.lang.Runnable to the Thread constructor.

Subclass or Runnable?
	- There are no rules about which of the two methods that is the best. Both methods works. 
	- Prefer implementing Runnable, and handing an instance of the implementation to a Thread instance. 
		When having the Runnable's executed by a thread pool it is easy to queue up the Runnable instances until a thread from 
		the pool is idle. This is a little harder to do with Thread subclasses.
	- Sometimes you may have to implement Runnable as well as subclass Thread. 
		For instance, if creating a subclass of Thread that can execute more than one Runnable. 
		This is typically the case when implementing a thread pool.

Race condition and critical section
	- The situation where two threads compete for the same resource, where the sequence in which the resource is accessed is 
		significant, is called race conditions. 
	- A code section that leads to race conditions is called a critical section.
	- Race conditions can be avoided by proper thread synchronization in critical sections. Thread synchronization can be achieved using a synchronized block of Java code. Thread synchronization can also be achieved using other synchronization constructs like locks or atomic variables like java.util.concurrent.atomic.AtomicInteger.

Thread Safety and Shared Resources
	- Code that is safe to call by multiple threads simultaneously is called thread safe. 
	- If a piece of code is thread safe, then it contains no race conditions. 
	- Race condition only occur when multiple threads update shared resources.

Resources Java threads share when executing
	1. Local Variables
		- Local variables are stored in each thread's own stack. 
		- That means that local variables are never shared between threads. 
		- That also means that all local primitive variables are thread safe.
		- e.g.,
			########################################################
			public void someMethod(){
				long threadSafeInt = 0;
				 threadSafeInt++;
			}
			########################################################
	2. Local Object References
		- Local references to objects are a bit different. The reference itself is not shared.
		- The object referenced however, is not stored in each threads's local stack. All objects are stored in the shared heap.
		- If an object created locally never escapes the method it was created in, it is thread safe.
		- In fact you can also pass it on to other methods and objects as long as none of these methods or objects make the passed object available to other threads.
		- e.g., of a thread safe local object:
			########################################################
			public void someMethod(){
				LocalObject localObject = new LocalObject();
			    localObject.callMethod();
			    method2(localObject);
			}
			
			public void method2(LocalObject localObject){
			  	localObject.setValue("value");
			}	
			########################################################
		- The LocalObject instance in this example is not returned from the method, nor is it passed to any other objects that are accessible from outside the someMethod() method. Each thread executing the someMethod() method will create its own LocalObject instance and assign it to the localObject reference. Therefore the use of the LocalObject here is thread safe.
		- In fact, the whole method someMethod() is thread safe. Even if the LocalObject instance is passed as parameter to other methods in the same class, or in other classes, the use of it is thread safe.
		- The only exception is of course, if one of the methods called with the LocalObject as parameter, stores the LocalObject instance in a way that allows access to it from other threads.
	
	3.Object Member Variables
		- Object member variables (fields) are stored on the heap along with the object. Therefore, if two threads call a method on the same object instance and this method updates object member variables, the method is not thread safe.
		- e.g., of a method that is not thread safe:
			########################################################
			public class NotThreadSafe{
			    StringBuilder builder = new StringBuilder();
			    public add(String text){
			        this.builder.append(text);
			    }
			}
			########################################################
		- If two threads call the add() method simultaneously on the same NotThreadSafe instance then it leads to race conditions.
		- e.g.,
			########################################################
			NotThreadSafe sharedInstance = new NotThreadSafe();

			new Thread(new MyRunnable(sharedInstance)).start();
			new Thread(new MyRunnable(sharedInstance)).start();
			
			public class MyRunnable implements Runnable{
			  NotThreadSafe instance = null;
			
			  public MyRunnable(NotThreadSafe instance){
			    this.instance = instance;
			  }
			
			  public void run(){
			    this.instance.add("some text");
			  }
			}
			########################################################

- When trying to determine if your code's access of a certain resource is thread safe you can use the thread control escape rule:
	Rule-> If a resource is created, 
			used and disposed within the control of the same thread,
			and never escapes the control of this thread,
			the use of that resource is thread safe.

- Even if the use of an object is thread safe, if that object points to a shared resource like a file or database, your application as a whole may not be thread safe.

The Internal Java Memory Model
	- The Java memory model specifies how the Java virtual machine works with the computer's memory (RAM).
	- The Java memory model used internally in the JVM divides memory between thread stacks and the heap.
	- Each thread running in the Java virtual machine has its own thread stack. The thread stack contains information about what methods the thread has called to reach the current point of execution. I will refer to this as the "call stack". As the thread executes its code, the call stack changes.
	- The thread stack also contains all local variables for each method being executed (all methods on the call stack). A thread can only access it's own thread stack. Local variables created by a thread are invisible to all other threads than the thread who created it. Even if two threads are executing the exact same code, the two threads will still create the local variables of that code in each their own thread stack. Thus, each thread has its own version of each local variable.
	- All local variables of primitive types ( boolean, byte, short, char, int, long, float, double) are fully stored on the thread stack and are thus not visible to other threads. One thread may pass a copy of a pritimive variable to another thread, but it cannot share the primitive local variable itself.
	- The heap contains all objects created in your Java application, regardless of what thread created the object. This includes the object versions of the primitive types (e.g. Byte, Integer, Long etc.). It does not matter if an object was created and assigned to a local variable, or created as a member variable of another object, the object is still stored on the heap.
	- A local variable may be of a primitive type, in which case it is totally kept on the thread stack.
	- A local variable may also be a reference to an object. In that case the reference (the local variable) is stored on the thread stack, but the object itself is stored on the heap.
	- An object may contain methods and these methods may contain local variables. These local variables are also stored on the thread stack, even if the object the method belongs to is stored on the heap.
	- An object's member variables are stored on the heap along with the object itself. That is true both when the member variable is of a primitive type, and if it is a reference to an object.
	- Static class variables are also stored on the heap along with the class definition.
	- Objects on the heap can be accessed by all threads that have a reference to the object. When a thread has access to an object, it can also get access to that object's member variables. If two threads call a method on the same object at the same time, they will both have access to the object's member variables, but each thread will have its own copy of the local variables.

- If two or more threads are sharing an object, without the proper use of either volatile declarations or synchronization, updates to the shared object made by one thread may not be visible to other threads.
- The volatile keyword can make sure that a given variable is read directly from main memory, and always written back to main memory when updated.
- If two or more threads share an object, and more than one thread updates variables in that shared object, race conditions may occur.
- A synchronized block guarantees that only one thread can enter a given critical section of the code at any given time. Synchronized blocks also guarantee that all variables accessed inside the synchronized block will be read in from main memory, and when the thread exits the synchronized block, all updated variables will be flushed back to main memory again, regardless of whether the variable is declared volatile or not.