Multitasking
	- a computer had a single CPU, and was only capable of executing a single program at a time. Later came multitasking which meant that 
		computers could execute multiple programs (AKA tasks or processes) at the same time. It wasn't really "at the same time" though. 
		The single CPU was shared between the programs. The operating system would switch between the programs running, executing each of 
		them for a little while before switching.

Multithreading
	- Which mean that you could have multiple threads of execution inside the same program. A thread of execution can be thought of as a 
		CPU executing the program. When you have multiple threads executing the same program, it is like having multiple CPUs execute within 
		the same program.
	- Multithreading can be a great way to increase the performance of some types of programs. However, mulithreading is even more 
		challenging than multitasking. The threads are executing within the same program and are hence reading and writing the same 
		memory simultanously. This can result in errors not seen in a singlethreaded program.
	- A thread needs some resources from the computer in order to run. Besides CPU time a thread needs some memory to keep its local stack. 
		It may also take up some resources inside the operating system needed to manage the thread.

Benefits of multithreading
	- Better resource utilization.
	- Simpler program design in some situations.
	- More responsive programs.
	
Persistent Data Structures
	- A persistent data structure always preserves the previous version of itself when modified. Thus, if multiple threads point to the 
		same persistent data structure and one thread modifies it, the modifying thread gets a reference to the new structure. 
		All other threads keep a reference to the old structure which is still unchanged and thus consistent.

NIO (Non-blocking IO)
	- Non-blocking IO means that when a worker starts an IO operation (e.g. reading a file or data from a network connection) the worker 
		does not wait for the IO call to finish. IO operations are slow, so waiting for IO operations to complete is a waste of CPU time. 
		The CPU could be doing something else in the meanwhile. When the IO operation finishes, the result of the IO operation 
		( e.g. data read or status of data written) is passed on to another worker.
		
Concurrency
	- Concurrency means that an application is making progress on more than one task at the same time (concurrently). 
		Well, if the computer only has one CPU the application may not make progress on more than one task at exactly the same time, 
		but more than one task is being processed at a time inside the application. It does not completely finish one task before it 
		begins the next.
	- Multiple tasks makes progress at the same time.
	- Concurrency is related to how an application handles multiple tasks it works on. 
		An application may process one task at at time (sequentially) or work on multiple tasks at the same time (concurrently).
		
Parallelism
	- Parallelism means that an application splits its tasks up into smaller subtasks which can be processed in parallel, 
		for instance on multiple CPUs at the exact same time.
	- Each task is broken into subtasks which can be processed in parallel.
	- Parallelism on the other hand, is related to how an application handles each individual task. 
		An application may process the task serially from start to end, or split the task up into subtasks which can be completed 
		in parallel.

Thread
	- Java threads are objects like any other Java objects. Threads are instances of class java.lang.Thread, 
		or instances of subclasses of this class. In addition to being objects, java threads can also execute code. 
	
	- A thread is a thread of execution in a program. The Java Virtual Machine allows an application to have 
		multiple threads of execution running concurrently (at the same time; simultaneously).
	
	- When a Java Virtual Machine starts up, there is usually a single non-daemon thread 
		(which typically calls the method named main of some designated class). 
	
	- The Java Virtual Machine continues to execute threads until either of the following occurs:
		- The exit method of class Runtime has been called and the security manager has permitted the exit operation to take place.
		- All threads that are not daemon threads have died, either by returning from the call to the run method or by throwing 
			an exception that propagates beyond the run method.
	
	- There are two ways to specify what code the thread should execute. 
		- The first is to create a subclass of Thread and override the run() method. 
		- The second method is to pass an object that implements Runnable (java.lang.Runnable) to the Thread constructor.

Subclass or Runnable?
	- There are no rules about which of the two methods that is the best. Both methods works. 
	- Prefer implementing Runnable, and handing an instance of the implementation to a Thread instance. 
		When having the Runnable's executed by a thread pool it is easy to queue up the Runnable instances until a thread from 
		the pool is idle. This is a little harder to do with Thread subclasses.
	- Sometimes you may have to implement Runnable as well as subclass Thread. 
		For instance, if creating a subclass of Thread that can execute more than one Runnable. 
		This is typically the case when implementing a thread pool.

Race condition and critical section
	- The situation where two threads compete for the same resource, where the sequence in which the resource is accessed is 
		significant, is called race conditions.
	- A race condition is a special condition that may occur inside a critical section.
	- A critical section is a section of code that is executed by multiple threads and where the sequence of execution for the 
		threads makes a difference in the result of the concurrent execution of the critical section.
	- A code section that leads to race conditions is called a critical section.
	
Preventing Race Conditions
	- To prevent race conditions from occurring you must make sure that the critical section is executed as an atomic instruction. 
		That means that once a single thread is executing it, no other threads can execute it until the first thread has left the 
		critical section.
	- Race conditions can be avoided by proper thread synchronization in critical sections. 
		Thread synchronization can be achieved using a synchronized block of Java code. Thread synchronization can also be achieved 
		using other synchronization constructs like locks or atomic variables like java.util.concurrent.atomic.AtomicInteger.

Thread Safety and Shared Resources
	- Code that is safe to call by multiple threads simultaneously is called thread safe. 
	- If a piece of code is thread safe, then it contains no race conditions. 
	- Race condition only occur when multiple threads update shared resources.

Resources Java threads share when executing
	1. Local Variables
		- Local variables are stored in each thread's own stack. 
		- That means that local variables are never shared between threads. 
		- That also means that all local primitive variables are thread safe.
		- e.g.,
			########################################################
			public void someMethod(){
				long threadSafeInt = 0;
				 threadSafeInt++;
			}
			########################################################
	2. Local Object References
		- Local references to objects are a bit different. The reference itself is not shared.
		- The object referenced however, is not stored in each threads's local stack. All objects are stored in the shared heap.
		- If an object created locally never escapes the method it was created in, it is thread safe.
		- In fact you can also pass it on to other methods and objects as long as none of these methods or objects make the passed 
			object available to other threads.
		- e.g., of a thread safe local object:
			########################################################
			public void someMethod(){
				LocalObject localObject = new LocalObject();
			    localObject.callMethod();
			    method2(localObject);
			}
			
			public void method2(LocalObject localObject){
			  	localObject.setValue("value");
			}	
			########################################################
		- The LocalObject instance in this example is not returned from the method, nor is it passed to any other objects that are 
			accessible from outside the someMethod() method. Each thread executing the someMethod() method will create its own 
			LocalObject instance and assign it to the localObject reference. Therefore the use of the LocalObject here is thread safe.
		- In fact, the whole method someMethod() is thread safe. Even if the LocalObject instance is passed as parameter to other 
			methods in the same class, or in other classes, the use of it is thread safe.
		- The only exception is of course, if one of the methods called with the LocalObject as parameter, stores the LocalObject 
			instance in a way that allows access to it from other threads.
	
	3.Object Member Variables
		- Object member variables (fields) are stored on the heap along with the object. Therefore, if two threads call a method 
			on the same object instance and this method updates object member variables, the method is not thread safe.
		- e.g., of a method that is not thread safe:
			########################################################
			public class NotThreadSafe{
			    StringBuilder builder = new StringBuilder();
			    public add(String text){
			        this.builder.append(text);
			    }
			}
			########################################################
		- If two threads call the add() method simultaneously on the same NotThreadSafe instance then it leads to race conditions.
		- e.g.,
			########################################################
			NotThreadSafe sharedInstance = new NotThreadSafe();

			new Thread(new MyRunnable(sharedInstance)).start();
			new Thread(new MyRunnable(sharedInstance)).start();
			
			public class MyRunnable implements Runnable{
			  NotThreadSafe instance = null;
			
			  public MyRunnable(NotThreadSafe instance){
			    this.instance = instance;
			  }
			
			  public void run(){
			    this.instance.add("some text");
			  }
			}
			########################################################

- When trying to determine if your code's access of a certain resource is thread safe you can use the thread control escape rule:
	
	Rule-> If a resource is created, used and disposed within the control of the same thread,
			and never escapes the control of this thread, the use of that resource is thread safe.

	Resources can be any shared resource like an object, array, file, database connection, socket etc.
	
- Even if the use of an object is thread safe, if that object points to a shared resource like a file or database, 
	your application as a whole may not be thread safe.

The Internal Java Memory Model
	- The Java memory model specifies how the Java virtual machine works with the computer's memory (RAM).
	- The Java memory model used internally in the JVM divides memory between thread stacks and the heap.
	- Each thread running in the Java virtual machine has its own thread stack. 
		The thread stack contains information about what methods the thread has called to reach the current 
		point of execution. aka "call stack". As the thread executes its code, the call stack changes.
	- The thread stack also contains all local variables for each method being executed 
		(all methods on the call stack). A thread can only access it's own thread stack. 
		Local variables created by a thread are invisible to all other threads than the thread who created it. 
		Even if two threads are executing the exact same code, the two threads will still create the local 
		variables of that code in each their own thread stack. Thus, each thread has its own version of each 
		local variable.
	- All local variables of primitive types ( boolean, byte, short, char, int, long, float, double) are 
		fully stored on the thread stack and are thus not visible to other threads. One thread may pass a 
		copy of a pritimive variable to another thread, but it cannot share the primitive local variable itself.
	- The heap contains all objects created in your Java application, regardless of what thread created the 
		object. This includes the object versions of the primitive types (e.g. Byte, Integer, Long etc.). 
		It does not matter if an object was created and assigned to a local variable, or created as a member 
		variable of another object, the object is still stored on the heap.
	- A local variable may be of a primitive type, in which case it is totally kept on the thread stack.
	- A local variable may also be a reference to an object. In that case the reference (the local variable) 
		is stored on the thread stack, but the object itself is stored on the heap.
	- An object may contain methods and these methods may contain local variables. These local variables are 
		also stored on the thread stack, even if the object the method belongs to is stored on the heap.
	- An object's member variables are stored on the heap along with the object itself. That is true both when 
		the member variable is of a primitive type, and if it is a reference to an object.
	- Static class variables are also stored on the heap along with the class definition.
	- Objects on the heap can be accessed by all threads that have a reference to the object. When a thread 
		has access to an object, it can also get access to that object's member variables. If two threads call 
		a method on the same object at the same time, they will both have access to the object's member 
		variables, but each thread will have its own copy of the local variables.

Java's volatile keyword. 
	- If two or more threads are sharing an object, without the proper use of either volatile declarations or 
		synchronization, updates to the shared object made by one thread may not be visible to other threads.
	- The volatile keyword can make sure that a given variable is read directly from main memory, and always 
		written back to main memory when updated.

Race condition
	- If two or more threads share an object, and more than one thread updates variables in that shared object, 
		race conditions may occur.
	- A synchronized block guarantees that only one thread can enter a given critical section of the code at 
		any given time. Synchronized blocks also guarantee that all variables accessed inside the synchronized 
		block will be read in from main memory, and when the thread exits the synchronized block, all updated 
		variables will be flushed back to main memory again, regardless of whether the variable is declared 
		volatile or not.


Java Synchronized Blocks
	- A Java synchronized block marks a method or a block of code as synchronized. 
	- Java synchronized blocks can be used to avoid race conditions.
	
	The Java synchronized Keyword
		- All synchronized blocks synchronized on the same object can only have one thread executing inside 
			them at the same time. All other threads attempting to enter the synchronized block are blocked 
			until the thread inside the synchronized block exits the block.
			
		- The synchronized keyword can be used to mark four different types of blocks:

			1. Instance methods
			2. Static methods
			3. Code blocks inside instance methods
			4. Code blocks inside static methods


		1. Synchronized Instance Methods
			e.g.,
				 public synchronized void add(int value){
				 	this.count += value;
				 }
			- A synchronized instance method in Java is synchronized on the instance (object) owning 
				the method. Thus, each instance has its synchronized methods synchronized on a different 
				object: the owning instance. 
			- Only one thread can execute inside a synchronized instance method. If more than one 
				instance exist, then one thread at a time can execute inside a synchronized instance 
				method per instance. One thread per instance.

		2. Synchronized Static Methods
			e.g.,
				public static synchronized void add(int value){
					count += value;
				}
				
			- Synchronized static methods are synchronized on the class object of the class the 
				synchronized static method belongs to. Since only one class object exists in the 
				Java VM per class, only one thread can execute inside a static synchronized method 
				in the same class.
			- If the static synchronized methods are located in different classes, then one thread 
				can execute inside the static synchronized methods of each class. One thread per class 
				regardless of which static synchronized method it calls.
			
		3. Synchronized Blocks in Instance Methods
		
			e.g.,
				public void add(int value){
					synchronized(this){
				    	this.count += value;   
				    }
				}				

			- Notice how the Java synchronized block construct takes an object in parentheses. 
				In the example "this" is used, which is the instance the add method is called on. 
				The object taken in the parentheses by the synchronized construct is called a monitor 
				object. The code is said to be synchronized on the monitor object. 
				A synchronized instance method uses the object it belongs to as monitor object.
			- Only one thread can execute inside a Java code block synchronized on the same monitor 
				object.
		
		4. Synchronized Blocks in Static Methods
		
			e.g.,
				 public class MyClass {
				    public static void log2(String msg1, String msg2){
				       synchronized(MyClass.class){
				          log.writeln(msg1);
				          log.writeln(msg2);  
				       }
				    }
				  }
			- This methods is synchronized on the class object of the class the methods belong to:
				
				
Java Volatile Keyword
	- The Java volatile keyword is used to mark a Java variable as "being stored in main memory". 
		More precisely that means, that every read of a volatile variable will be read from the 
		computer's main memory, and not from the CPU cache, and that every write to a volatile 
		variable will be written to main memory, and not just to the CPU cache.
	- The Java volatile keyword guarantees visibility of changes to variables across threads.
	- In a multithreaded application where the threads operate on non-volatile variables, 
		each thread may copy variables from main memory into a CPU cache while working on them, 
		for performance reasons. If your computer contains more than one CPU, each thread may run 
		on a different CPU. That means, that each thread may copy the variables into the CPU cache 
		of different CPUs.
	- With non-volatile variables there are no guarantees about when the Java Virtual Machine (JVM) 
		reads data from main memory into CPU caches, or writes data from CPU caches to main memory. 
		This can cause several problems.
	- The Java volatile keyword is intended to address variable visibility problems. 
		By declaring the counter variable volatile all writes to the counter variable will be written 
		back to main memory immediately. Also, all reads of the counter variable will be read directly 
		from main memory.
	- Declaring a variable volatile thus guarantees the visibility for other threads of writes to 
		that variable.
	- Reading and writing of volatile variables causes the variable to be read or written to main memory. 
		Reading from and writing to main memory is more expensive than accessing the CPU cache. 
		Accessing volatile variables also prevent instruction reordering which is a normal performance 
		enhancement technique. Thus, you should only use volatile variables when you really need to 
		enforce visibility of variables.
					
Java ThreadLocal
	- The ThreadLocal class in Java enables you to create variables that can only be read and written 
		by the same thread. 
	- Thus, even if two threads are executing the same code, and the code has a reference to a 
		ThreadLocal variable, then the two threads cannot see each other's ThreadLocal variables.				
				
Thread Signaling
	- Java has a builtin wait mechanism that enable threads to become inactive while waiting for signals. 
		The class java.lang.Object defines three methods, wait(), notify(), and notifyAll(), 
		to facilitate this.
	- A thread that calls wait() on any object becomes inactive until another thread calls notify() 
		on that object. In order to call either wait() or notify the calling thread must first obtain 
		the lock on that object. In other words, the calling thread must call wait() or notify() 
		from inside a synchronized block.
	- There is also a notifyAll() method that will wake all threads waiting on a given object.				
	- A thread cannot call wait(), notify() or notifyAll() without holding the lock on the object 
		the method is called on. If it does, an IllegalMonitorStateException is thrown.
	- Once a thread calls wait() it releases the lock it holds on the monitor object. This allows other 
		threads to call wait() or notify() too, since these methods must be called from inside a 
		synchronized block.
	- Once a thread is awakened it cannot exit the wait() call until the thread calling notify() has 
		left its synchronized block. In other words: The awakened thread must reobtain the lock on the 
		monitor object before it can exit the wait() call, because the wait call is nested inside a 
		synchronized block. If multiple threads are awakened using notifyAll() only one awakened thread 
		at a time can exit the wait() method, since each thread must obtain the lock on the monitor 
		object in turn before exiting wait().
				
Thread Deadlock
	- A deadlock is when two or more threads are blocked waiting to obtain locks that some of the other 
		threads in the deadlock are holding. Deadlock can occur when multiple threads need the same locks, 
		at the same time, but obtain them in different order.
					
				
Starvation and Fairness
	- If a thread is not granted CPU time because other threads grab it all, it is called "starvation". 
		The thread is "starved to death" because other threads are allowed the CPU time instead of it. 
		The solution to starvation is called "fairness" - that all threads are fairly granted a chance 
		to execute.
		
	- Causes of Starvation in Java
		The following three common causes can lead to starvation of threads in Java:

			- Threads with high priority swallow all CPU time from threads with lower priority.

			- Threads are blocked indefinitely waiting to enter a synchronized block, because other 
				threads are constantly allowed access before it.

			- Threads waiting on an object (called wait() on it) remain waiting indefinitely because 
				other threads are constantly awakened instead of it.					 
				
				
Implementing Fairness in Java
	- Using Locks Instead of Synchronized Blocks				
				
What is Slipped Conditions?
	- Slipped conditions means, that from the time a thread has checked a certain condition until it 
		acts upon it, the condition has been changed by another thread so that it is errornous for the 
		first thread to act. 				
				
Locks in Java
	- A lock is a thread synchronization mechanism like synchronized blocks except locks can be more 
		sophisticated than Java's synchronized blocks. 
		Locks (and other more advanced synchronization mechanisms) are created using synchronized blocks, 
		so it is not like we can get totally rid of the synchronized keyword.
		
	- synchronized block of Java code:
		e.g.,
			public class Counter{
			  private int count = 0;
			  public int inc(){
			    synchronized(this){
			      return ++count;
			    }
			  }
			}
		
		- Notice the synchronized(this) block in the inc() method. This block makes sure that only one 
			thread can execute the return ++count at a time.
				
	- Using a Lock instead of a synchronized block
		e.g.,
			public class Counter{
			  private Lock lock = new Lock();
			  private int count = 0;
			
			  public int inc(){
			    lock.lock();
			    int newCount = ++count;
			    lock.unlock();
			    return newCount;
			  }
			}
		- The lock() method locks the Lock instance so that all threads calling lock() are blocked 
			until unlock() is executed.
		
				
	- Lock Reentrance
		- Synchronized blocks in Java are reentrant. This means, that if a Java thread enters a 
			synchronized block of code, and thereby take the lock on the monitor object the block is 
			synchronized on, the thread can enter other Java code blocks synchronized on the same monitor 
			object.
			
		- e.g.,
			public class Reentrant{
			  public synchronized outer(){
			    inner();
			  }
			  public synchronized inner(){
			    //do something
			  }
			}
		- Notice how both outer() and inner() are declared synchronized, which in Java is equivalent to a 
			synchronized(this) block. If a thread calls outer() there is no problem calling inner() 
			from inside outer(), since both methods (or blocks) are synchronized on the same monitor 
			object ("this"). If a thread already holds the lock on a monitor object, it has access to all 
			blocks synchronized on the same monitor object. This is called reentrance. 
			The thread can reenter any block of code for which it already holds the lock.
	
	
Read / Write Locks in Java
	- Imagine you have an application that reads and writes some resource, but writing it is not done as 
		much as reading it is. Two threads reading the same resource does not cause problems for each 
		other, so multiple threads that want to read the resource are granted access at the same time, 
		overlapping. But, if a single thread wants to write to the resource, no other reads nor writes 
		must be in progress at the same time. To solve this problem of allowing multiple readers but only 
		one writer, you will need a read / write lock.
		
	- Conditions for getting read and write access to the resource:

		Read Access  : If no threads are writing, and no threads have requested write access.
		Write Access : If no threads are reading or writing.	
	
Reentrance Lockout
	- Reentrance lockout is a situation similar to deadlock and nested monitor lockout.
	- Reentrance lockout may occur if a thread reenters a Lock, ReadWriteLock or some other synchronizer 
		that is not reentrant. 
		Reentrant means that a thread that already holds a lock can retake it. Java's synchronized blocks 
		are reentrant.	
	
Semaphores
	- A Semaphore is a thread synchronization construct that can be used either to send signals between threads 
		to avoid missed signals, or to guard a critical section like you would with a lock.	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
				
				


